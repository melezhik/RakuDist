#exit(0);

my $user = config()<user>;

my $directory = "/data/test/{$user}";

my $scm = config()<scm>;

my $project = config()<project>;

my $rakudo-version = config()<rakudo_version>;

my $patch-dir = "files/patches/$project";

# ------------------------------------------- INSTALL Rakudo -------------------------------------------------------- #

say "<<< PREPARE Environment >>>";

user $user;

bash "rm -rf /home/$user/.perl6/*", %(
  description => "clean ~/.perl6 for user $user",
  user => $user
);

bash "rm -rf /home/$user/.raku/*", %(
  description => "clean ~/.raku for user $user",
  user => $user
);

zef "https://github.com/melezhik/sparrow6-rakudo-install.git", %( force => True );

module-run 'Rakudo::Install', %(
  user => $user,
  rakudo-version => $rakudo-version,
);

# ------------------------------------------- INSTALL Module -------------------------------------------------------- #

say "<<< CHECKOUT Source Code >>>";

directory-delete $directory;

directory $directory, %( 
  owner => $user,
  group => $user
);


git-scm $scm, %( 
  to => $directory, 
  user => $user,
);

bash "cd {$directory} && git submodule update --init", %(
  description => "checkout git submodules",
  user => $user,
  debug => False
);

bash "cd {$directory} && git log --name-status HEAD^..HEAD", %(
  description => "last commit"
);

say "<<< INSTALL Module >>>";

my $dir = $*CWD;

if "{$patch-dir}/sparrowfile".IO ~~ :f {
  say "*** patch dir: {$patch-dir}, patch found ***";
  say "*** execute patch from {$patch-dir}/sparrowfile ***";
  # post deployment checks
  chdir $patch-dir;
  EVALFILE "sparrowfile";
  chdir $dir;
} else {
  say "*** patch dir: {$patch-dir}, no patch found ***";
}

if "{$patch-dir}/depends.raku".IO ~~ :f {
  say "*** install Raku modules from {$patch-dir}/depends.raku file ***";
  # install Raku modules from depends.raku file
  for "{$patch-dir}/depends.raku".IO.lines -> $line {
    next if $line ~~ /^^ \s* '#' /;
    my @params = $line.split(/\s+/);
    my $module = @params.shift;
    next unless $line ~~ /\S/;
    zef $module, %(
      user => $user,
      notest => @params.Set{'notest'} ?? True !! False
    );
  }
}

if "{$directory}/.rakudist/sparrowfile".IO ~~ :f {
  say "*** execute custom scenario from .rakudist/sparrowfile ***";
  bash "mkdir -p {$directory}/.rakudist/conf && cp -v {%*ENV<SP6_CONFIG>}  {$directory}/.rakudist/conf/", %(
    description => "copy configuartion file",
  );
  # custom installation logic, for example external libraries
  chdir "$directory/.rakudist/";
  EVALFILE "sparrowfile";
  chdir $dir;
}

if "{$directory}/.rakudist/depends.raku".IO ~~ :f {
  say "*** install Raku modules from .rakudist/depends.raku file ***";
  # install Raku modules from depends.raku file
  for "{$directory}/.rakudist/depends.raku".IO.lines -> $line {
    next unless $line ~~ /\S/;
    next if $line ~~ /^^ \s* '#' /;
    my @params = $line.split(/\s+/);
    my $module = @params.shift;
    zef $module, %(
      user => $user,
      notest => @params.Set{'notest'} ?? True !! False
    );
  }
}

bash "cd {$directory} && ls -l";

if os() eq 'alpine' {

  # this is needed for alpine rakudo installation
  unless "/bin/zef".IO ~~ :e {
    copy "/opt/rakudo-pkg/share/perl6/core/bin/zef", "/bin/zef"
  }

  # this is needed for alpine rakudo installation
  unless "/bin/perl6".IO ~~ :e {
    copy "/opt/rakudo-pkg/bin/perl6", "/bin/perl6"
  }


}

bash "cd {$directory} && zef install .", %(
  description => "zef install .",
  user => $user,
  debug => False
);


if "{$directory}/.rakudist/smokefile".IO ~~ :f {
  say "*** execute smoke test scenario from .rakudist/smokefile ***";
  bash "mkdir -p {$directory}/.rakudist/conf && cp -v {%*ENV<SP6_CONFIG>}  {$directory}/.rakudist/conf/", %(
    description => "copy configuartion file",
  );
  # post deployment checks
  chdir "$directory/.rakudist/";
  EVALFILE "smokefile";
  chdir $dir;
}

run-tomty-tests("{$directory}") if "{$directory}/.tomty".IO ~~ :d;
run-tomty-tests("{$directory}/.rakudist") if "{$directory}/.rakudist/.tomty".IO ~~ :d;
run-tomty-tests("{$patch-dir}") if "{$patch-dir}/.tomty".IO ~~ :d;

say "===";
say "RakuDist: OK";


sub run-tomty-tests ( $path ) {

  say "***  Tomty tests found at $path/.tomty, installing Tomty ***";
  zef "Tomty", %(
    notest => True,
    user => config()<user>,
  );
  say "*** Run tomty tests from $path/.tomty ***";
  bash "tomty --init && tomty --all --show-failed", %(
    description => "tomty test",
    user => config()<user>,
    envvars => %( SP6_REPO => 'http://repo.westus.cloudapp.azure.com/' ),
    cwd => $path
  );

}
