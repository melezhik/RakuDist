my $user = config()<user>;
my $module = config()<module>;
my $rakudo-version = config()<rakudo_version>;

# ------------------------------------------- INSTALL Rakudo -------------------------------------------------------- #

say "<<< PREPARE Environment >>>";

user $user;

bash "rm -rf /home/$user/.perl6/*", %(
  description => "clean ~/.perl6 for user $user",
  user => $user
);

bash "rm -rf /home/$user/.raku/*", %(
  description => "clean ~/.raku for user $user",
  user => $user
);

zef "https://github.com/melezhik/sparrow6-rakudo-install.git", %( force => True );

module-run 'Rakudo::Install', %(
  user => $user,
  rakudo-version => $rakudo-version,
);

# ------------------------------------------- INSTALL Module -------------------------------------------------------- #

say "<<< INSTALL Module >>>";

if os() eq 'alpine' {

  # this is needed for alpine rakudo installation
  unless "/bin/zef".IO ~~ :e {
    copy "/opt/rakudo-pkg/share/perl6/core/bin/zef", "/bin/zef"
  }

  # this is needed for alpine rakudo installation
  unless "/bin/perl6".IO ~~ :e {
    copy "/opt/rakudo-pkg/bin/perl6", "/bin/perl6"
  }


}

my %state = task-run "zef fetch {$module}", "zef-fetch", %(
  identity => $module,
  user => $user,
);

my $dir = $*CWD;

if "{%state<directory>}/.rakudist/sparrowfile".IO ~~ :f {
  say "execute custom scenario from .rakudist/sparrowfile";
  bash "mkdir -p {%state<directory>}/.rakudist/conf && cp -v {%*ENV<SP6_CONFIG>} {%state<directory>}/.rakudist/conf/", %(
    description => "copy configuartion file",
  );
  # custom installation logic, for example external libraries
  chdir "{%state<directory>}/.rakudist/";
  EVALFILE "sparrowfile";
  chdir $dir;
}

if "{%state<directory>}/.rakudist/depends.raku".IO ~~ :f {
  say "install Raku modules from .rakudist/depends.raku file";
  # install Raku modules from depends.raku file
  for "{%state<directory>}/.rakudist/depends.raku".IO.lines -> $line {
    next if $line ~~ /^^ \s* '#' /;
    my @params = $line.split(/\s+/);
    my $module = @params.shift;
    next unless $line ~~ /\S/;
    zef $module, %(
      user => $user,
      notest => @params.Set{'notest'} ?? True !! False
    );    
  }
}


bash "cd {%state<directory>} && zef install .", %(
  description => "zef install $module",
  user => $user,
  debug => False
);


say "===";
say "RakuDist: OK";
